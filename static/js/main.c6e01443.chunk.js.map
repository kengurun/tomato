{"version":3,"sources":["COMPONENTS/TIMER/timer.module.css","ASSETS/IMAGES/tomato.gif","COMPONENTS/TIMER/timerWithHooks.jsx","REDUX/timerReducer.js","COMPONENTS/TIMER/timerContainer.jsx","COMPONENTS/TIMER/msToTimeString.js","COMPONENTS/HEADER/header.jsx","COMPONENTS/HEADER/headerContainer.jsx","App.js","serviceWorker.js","REDUX/authReducer.js","REDUX/reduxStore.js","index.js"],"names":["module","exports","TimerWithHooks","props","useState","timerDuration","setTimerDuration","className","s","input","type","value","onChange","e","target","min","max","isStarted","Button","color","variant","onClick","stop","startTimer","result","id","timeLeft","tomato","showTomato","src","initialState","timerId","setTimeLeft","time","setTimerStatus","setShowTomato","show","stopTimer","dispatch","clearInterval","console","log","timerReducer","state","action","connected","connect","timerPage","minutes","count","setInterval","timeString","duration","seconds","parseInt","hours","msToTimeString","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","isAuth","auth","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","authReducer","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleWare","stor","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c6e01443.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"timer_button__3MnBY\",\"input\":\"timer_input__1vKNZ\",\"result\":\"timer_result__2u0jg\"};","module.exports = __webpack_public_path__ + \"static/media/tomato.a0296338.gif\";","import React, {useState} from 'react';\nimport s from './timer.module.css';\nimport tomato from '../../ASSETS/IMAGES/tomato.gif';\nimport Button from '@material-ui/core/Button';\n\nlet TimerWithHooks = (props) => {\n    // debugger;\n    let [timerDuration, setTimerDuration] = useState(1);\n    let onChange = (e) => {\n        setTimerDuration(e.target.value);\n    };\n    let startTimer = () => {\n        props.startTimer(timerDuration);\n    };\n    return (\n        <>\n            <div className={s.input}>\n                <p>Количество минут:</p>\n                <input type=\"number\"\n                       value={timerDuration}\n                       onChange={onChange} min='0.1' max='15'/>\n                <p> </p>\n            </div>\n            {\n                props.isStarted\n                    ? <Button color=\"secondary\" variant=\"contained\" onClick={props.stop}>Stop</Button>\n                    : <Button color=\"primary\" variant=\"contained\" onClick={startTimer}>Start</Button>\n            }\n            <div className={s.result}>Осталось времени: <span id='result'>{props.timeLeft}</span></div>\n            <div className={s.tomato}>\n                {props.showTomato ? <img src={tomato}/> : null}\n            </div>\n        </>\n    )\n};\n\nexport default TimerWithHooks;","let SET_TIMER_STATUS = 'SET_TIMER_STATUS';\nlet SET_TIME_LEFT = 'SET_TIME_LEFT';\nlet SET_SHOW_TOMATO = 'SET_SHOW_TOMATO';\nlet SET_TIMER_ID = 'SET_TIMER_ID';\n\nlet initialState = {\n    isStarted: false,\n    timeLeft: 0,\n    timerId: null,\n    showTomato: false\n};\n\nlet timerReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_TIME_LEFT: {\n            return {\n                ...state,\n                timeLeft: action.time\n            }\n        }\n        case SET_SHOW_TOMATO: {\n            return {\n                ...state,\n                showTomato: action.show\n            }\n        }\n        case SET_TIMER_STATUS:\n            return {\n                ...state,\n                isStarted: action.isStarted\n            };\n        case SET_TIMER_ID:\n            return {\n                ...state,\n                timerId: action.id\n            };\n\n        default:\n            return state;\n    }\n};\n\n\nexport const setTimeLeft = (time) => ({type: SET_TIME_LEFT, time: time});\nexport const setTimerStatus = (isStarted) => ({type: SET_TIMER_STATUS, isStarted: isStarted});\nexport const setTimerId = (id) => ({type: SET_TIMER_ID, id: id});\nexport const setShowTomato = (show) => ({type: SET_SHOW_TOMATO, show: show});\n\nexport const startTimer = (minutes) => {\n    return (dispatch) => {\n        let count = minutes * 60; // переводим минуты в секунды\n        dispatch(setShowTomato(false));\n        dispatch(setTimerStatus(true));\n        dispatch(setTimeLeft(count));\n        console.log('Timer started from ' + count + ' seconds');\n\n        let timerId = setInterval(() => {\n            count = count - 1;\n            if (count <= 0) {\n                dispatch(stopTimer(timerId));\n                dispatch(setShowTomato(true));\n            } else {\n                dispatch(setTimeLeft(count));\n            }\n            console.log(count);\n        }, 1000);\n        dispatch(setTimerId(timerId));\n        console.log('TimerID: ' + timerId);\n    };\n};\n\nexport const stopTimer = (timerId) => {\n    return (dispatch) => {\n        clearInterval(timerId);\n        dispatch(setTimerStatus(false));\n        dispatch(setTimeLeft(0));\n        console.log('Timer stopped.');\n    }\n};\n\nexport default timerReducer;\n\n","import React from 'react';\nimport TimerWithHooks from \"./timerWithHooks\";\nimport {connect} from 'react-redux';\nimport {startTimer, stopTimer} from \"../../REDUX/timerReducer\";\nimport {msToTimeString} from \"./msToTimeString\";\n\n\nconst TimerContainer = (props) => {\n    const stop = () => {\n        props.stopTimer(props.timerId);\n    };\n    let timeLeftMilisec = props.timeLeft * 1000;\n    let timeString = msToTimeString(timeLeftMilisec);\n    return <TimerWithHooks\n        isStarted={props.isStarted}\n        timeLeft={timeString}\n        timerDuration={props.timerDuration}\n        startTimer={props.startTimer}\n        showTomato={props.showTomato}\n        stop={stop}\n    />\n};\n\nlet mapStateToProps = (state) => {\n    return {\n        isStarted: state.timerPage.isStarted,\n        timeLeft: state.timerPage.timeLeft,\n        timerId: state.timerPage.timerId,\n        showTomato: state.timerPage.showTomato\n    }\n};\n\nlet connected = connect(mapStateToProps, {\n        startTimer,\n        stopTimer\n    }\n)(TimerContainer);\n\nexport default connected;","export const msToTimeString = (duration) => {\n    // let milliseconds = parseInt((duration % 1000) / 100)\n       let seconds = parseInt((duration / 1000) % 60),\n        minutes = parseInt((duration / (1000 * 60)) % 60),\n        hours = parseInt((duration / (1000 * 60 * 60)) % 24);\n\n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n    return hours + \":\" + minutes + \":\" + seconds;\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    }\n}));\n\nconst Header = (props) => {\n    const classes = useStyles();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    TomatoTimer\n                </Typography>\n                {props.isAuth\n                    ? <Button color=\"inherit\">Logout</Button>\n                    : <Button color=\"inherit\">Login</Button>\n                }\n            </Toolbar>\n        </AppBar>\n    )\n};\n\nexport default Header;","import React from 'react';\nimport Header from \"./header\";\nimport {connect} from 'react-redux';\n\nconst HeaderContainer = (props) => {\n    return (\n        <div>\n            <Header\n                isAuth={props.isAuth}\n            />\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n};\n\nexport default connect(mapStateToProps, {\n\n})(HeaderContainer);","import React from 'react';\nimport './App.css';\nimport TimerContainer from '../src/COMPONENTS/TIMER/timerContainer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport HeaderContainer from \"./COMPONENTS/HEADER/headerContainer\";\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n            <div className=\"App\">\n                {/*<header className=\"App-header\">*/}\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\"/>*/}\n                {/*</header>*/}\n                <HeaderContainer/>\n                <TimerContainer/>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let SET_IS_AUTH = 'SET_IS_AUTH';\n\n\nlet initialState = {\n    isAuth: false\n};\n\nlet authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_IS_AUTH: {\n            return {\n                ...state,\n                isAuth: action.isAuth\n            }\n        }\n        default:\n            return state;\n    }\n};\n\n\nexport const setIsAuth = (isAuth) => ({type: SET_IS_AUTH, isAuth: isAuth});\n\n\n\nexport default authReducer;\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport timerReducer from \"./timerReducer\";\nimport thunkMiddleWare from 'redux-thunk';\nimport authReducer from \"./authReducer\";\n\nlet reducers = combineReducers({\n        timerPage: timerReducer,\n        auth: authReducer\n    }\n);\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare));\nwindow.stor = store;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./REDUX/reduxStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}