{"version":3,"sources":["COMPONENTS/TIMER/timer.module.css","ASSETS/IMAGES/tomato.gif","COMPONENTS/TIMER/timer.jsx","REDUX/timerReducer.js","COMPONENTS/TIMER/timerContainer.jsx","COMPONENTS/TIMER/msToTimeString.js","COMPONENTS/HEADER/header.jsx","App.js","serviceWorker.js","REDUX/reduxStore.js","index.js"],"names":["module","exports","Timer","props","className","s","input","type","value","timerDuration","onChange","e","duration","target","updateDuration","min","max","button","onClick","startTimer","disabled","isStarted","result","id","timeLeft","tomato","showTomato","src","initialState","setTimeLeft","time","setTimerStatus","setShowTomato","show","timerReducer","state","action","TimerContainer","minutes","this","timeString","seconds","parseInt","hours","msToTimeString","React","Component","connected","connect","timerPage","dispatch","count","console","log","timerId","setInterval","clearInterval","setTimerDuration","Header","Button","variant","color","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleWare","stor","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27313dd5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"timer_button__3MnBY\",\"input\":\"timer_input__1vKNZ\",\"result\":\"timer_result__2u0jg\"};","module.exports = __webpack_public_path__ + \"static/media/tomato.a0296338.gif\";","import React from 'react';\nimport s from './timer.module.css';\nimport tomato from '../../ASSETS/IMAGES/tomato.gif';\n\nlet Timer = (props) => {\n    // debugger;\n    let onChange = (e) => {\n        let duration = e.target.value;\n        props.updateDuration(duration);\n    };\n    return (\n        <>\n            <span className={s.input}>\n                Количество минут: <input type=\"number\" value={props.timerDuration} onChange={onChange} min='0' max='15'/>\n            </span>\n            <span className={s.button}>\n                <button onClick={props.startTimer} disabled={props.isStarted}>Start</button>\n            </span>\n            <div className={s.result}>Осталось времени: <span id='result'>{props.timeLeft}</span></div>\n            <div className={s.tomato}>\n                { props.showTomato ? <img src={tomato} /> : null }\n            </div>\n        </>\n    )\n};\n\nexport default Timer;","let SET_TIMER_STATUS = 'SET_TIMER_STATUS';\nlet SET_TIME_LEFT = 'SET_TIME_LEFT';\nlet SET_TIMER_DURATION = 'SET_TIMER_DURATION';\nlet SET_SHOW_TOMATO = 'SET_SHOW_TOMATO';\n\nlet initialState = {\n    isStarted: false,\n    timeLeft: 0,\n    timerDuration: 1,\n    showTomato: false\n};\n\nlet timerReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_TIME_LEFT: {\n            return {\n                ...state,\n                timeLeft: action.time\n            }\n        }\n        case SET_TIMER_DURATION: {\n            return {\n                ...state,\n                timerDuration: action.duration\n            }\n        }\n        case SET_SHOW_TOMATO: {\n            return {\n                ...state,\n                showTomato: action.show\n            }\n        }\n        case SET_TIMER_STATUS:\n                return {\n                    ...state,\n                    isStarted: action.isStarted\n                };\n        default:\n            return state;\n    }\n};\n\n\nexport const setTimeLeft = (time) => ({type: SET_TIME_LEFT, time: time});\nexport const setTimerStatus = (isStarted) => ({type: SET_TIMER_STATUS, isStarted: isStarted});\nexport const setTimerDuration = (duration) => ({type: SET_TIMER_DURATION, duration: duration});\nexport const setShowTomato = (show) => ({type: SET_SHOW_TOMATO, show: show});\n\nexport const updateDuration = (duration) => {\n    return (dispatch) => {\n        dispatch(setTimerDuration(duration));\n        dispatch(setTimeLeft(duration * 60));\n        dispatch(setShowTomato(false));\n    }\n};\n\nexport const startTimer = (minutes) => {\n    return (dispatch) => {\n        let count = minutes  * 60; // переводим минуты в секунды\n        dispatch(setTimerStatus(true));\n        dispatch(setTimeLeft(count));\n        console.log('Timer started from ' + count + ' seconds');\n\n        let timerId = setInterval( () => {\n            count = count - 1;\n            if (count <= 0) {\n                clearInterval(timerId);\n                dispatch(setTimerStatus(false));\n                dispatch(setTimeLeft(0));\n                dispatch(setShowTomato(true));\n                console.log('Timer stopped.');\n            } else {\n                dispatch(setTimeLeft(count));\n                console.log(count);\n            }\n        }, 1000 );\n\n    };\n};\n\n\nexport default timerReducer;\n\n","import React from 'react';\nimport Timer from \"./timer\";\nimport {connect} from 'react-redux';\nimport {startTimer, updateDuration} from \"../../REDUX/timerReducer\";\nimport {msToTimeString} from \"./msToTimeString\";\n\n\nclass TimerContainer extends React.Component {\n\n    componentDidMount() {\n        this.props.updateDuration(this.props.timerDuration)\n    }\n\n    render() {\n        let timeLeft= this.props.timeLeft * 1000;\n        let timeString = msToTimeString(timeLeft);\n        return <Timer\n            isStarted={this.props.isStarted}\n            timeLeft={timeString}\n            timerDuration={this.props.timerDuration}\n            updateDuration={this.props.updateDuration}\n            startTimer={this.startTimer}\n            showTomato={this.props.showTomato}\n        />\n    }\n\n    startTimer = () => {\n        let minutes = this.props.timerDuration;\n        this.props.startTimer(minutes);\n    };\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        isStarted: state.timerPage.isStarted,\n        timeLeft: state.timerPage.timeLeft,\n        timerDuration: state.timerPage.timerDuration,\n        showTomato: state.timerPage.showTomato\n    }\n};\n\nlet connected = connect(mapStateToProps, {\n        startTimer,\n        updateDuration\n    }\n)(TimerContainer);\n\nexport default connected;","export const msToTimeString = (duration) => {\n    // let milliseconds = parseInt((duration % 1000) / 100)\n       let seconds = parseInt((duration / 1000) % 60),\n        minutes = parseInt((duration / (1000 * 60)) % 60),\n        hours = parseInt((duration / (1000 * 60 * 60)) % 24);\n\n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n    return hours + \":\" + minutes + \":\" + seconds;\n};","import React from 'react';\nimport {Button} from '@material-ui/core';\n\nconst Header = (props) => {\n    return (\n        <div>\n            <h1>Tomato timer</h1>\n            <Button variant=\"contained\" color=\"primary\">Hello World</Button>\n        </div>\n    )\n};\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport TimerContainer from '../src/COMPONENTS/TIMER/timerContainer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Header from \"./COMPONENTS/HEADER/header\";\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n            <div className=\"App\">\n                {/*<header className=\"App-header\">*/}\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\"/>*/}\n                {/*</header>*/}\n                <Header/>\n                <TimerContainer/>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport timerReducer from \"./timerReducer\";\nimport thunkMiddleWare from 'redux-thunk';\n\nlet reducers = combineReducers({\n        timerPage: timerReducer\n    }\n);\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare));\nwindow.stor = store;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./REDUX/reduxStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}